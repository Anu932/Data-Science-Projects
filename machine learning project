{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "42f378be",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "57304e5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\TANU\\\\Desktop\\\\DATA SCIENCE\\\\MAchine learning'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "03c67832",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"Demo Datasets/Lesson 3/mtcars.csv\", index_col=\"model\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4c134960",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cyl</th>\n",
       "      <th>disp</th>\n",
       "      <th>hp</th>\n",
       "      <th>drat</th>\n",
       "      <th>wt</th>\n",
       "      <th>qsec</th>\n",
       "      <th>vs</th>\n",
       "      <th>am</th>\n",
       "      <th>gear</th>\n",
       "      <th>carb</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mazda RX4</th>\n",
       "      <td>21.0</td>\n",
       "      <td>6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.90</td>\n",
       "      <td>2.620</td>\n",
       "      <td>16.46</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda RX4 Wag</th>\n",
       "      <td>21.0</td>\n",
       "      <td>6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.90</td>\n",
       "      <td>2.875</td>\n",
       "      <td>17.02</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Datsun 710</th>\n",
       "      <td>22.8</td>\n",
       "      <td>4</td>\n",
       "      <td>108.0</td>\n",
       "      <td>93</td>\n",
       "      <td>3.85</td>\n",
       "      <td>2.320</td>\n",
       "      <td>18.61</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hornet 4 Drive</th>\n",
       "      <td>21.4</td>\n",
       "      <td>6</td>\n",
       "      <td>258.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.08</td>\n",
       "      <td>3.215</td>\n",
       "      <td>19.44</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hornet Sportabout</th>\n",
       "      <td>18.7</td>\n",
       "      <td>8</td>\n",
       "      <td>360.0</td>\n",
       "      <td>175</td>\n",
       "      <td>3.15</td>\n",
       "      <td>3.440</td>\n",
       "      <td>17.02</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
       "model                                                                        \n",
       "Mazda RX4          21.0    6  160.0  110  3.90  2.620  16.46   0   1     4   \n",
       "Mazda RX4 Wag      21.0    6  160.0  110  3.90  2.875  17.02   0   1     4   \n",
       "Datsun 710         22.8    4  108.0   93  3.85  2.320  18.61   1   1     4   \n",
       "Hornet 4 Drive     21.4    6  258.0  110  3.08  3.215  19.44   1   0     3   \n",
       "Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3   \n",
       "\n",
       "                   carb  \n",
       "model                    \n",
       "Mazda RX4             4  \n",
       "Mazda RX4 Wag         4  \n",
       "Datsun 710            1  \n",
       "Hornet 4 Drive        1  \n",
       "Hornet Sportabout     2  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "14bf7eaf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cyl</th>\n",
       "      <th>disp</th>\n",
       "      <th>hp</th>\n",
       "      <th>drat</th>\n",
       "      <th>wt</th>\n",
       "      <th>qsec</th>\n",
       "      <th>vs</th>\n",
       "      <th>am</th>\n",
       "      <th>gear</th>\n",
       "      <th>carb</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AMC Javelin</th>\n",
       "      <td>15.2</td>\n",
       "      <td>8</td>\n",
       "      <td>304.0</td>\n",
       "      <td>150</td>\n",
       "      <td>3.15</td>\n",
       "      <td>3.435</td>\n",
       "      <td>17.30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cadillac Fleetwood</th>\n",
       "      <td>10.4</td>\n",
       "      <td>8</td>\n",
       "      <td>472.0</td>\n",
       "      <td>205</td>\n",
       "      <td>2.93</td>\n",
       "      <td>5.250</td>\n",
       "      <td>17.98</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Camaro Z28</th>\n",
       "      <td>13.3</td>\n",
       "      <td>8</td>\n",
       "      <td>350.0</td>\n",
       "      <td>245</td>\n",
       "      <td>3.73</td>\n",
       "      <td>3.840</td>\n",
       "      <td>15.41</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chrysler Imperial</th>\n",
       "      <td>14.7</td>\n",
       "      <td>8</td>\n",
       "      <td>440.0</td>\n",
       "      <td>230</td>\n",
       "      <td>3.23</td>\n",
       "      <td>5.345</td>\n",
       "      <td>17.42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Datsun 710</th>\n",
       "      <td>22.8</td>\n",
       "      <td>4</td>\n",
       "      <td>108.0</td>\n",
       "      <td>93</td>\n",
       "      <td>3.85</td>\n",
       "      <td>2.320</td>\n",
       "      <td>18.61</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
       "model                                                                         \n",
       "AMC Javelin         15.2    8  304.0  150  3.15  3.435  17.30   0   0     3   \n",
       "Cadillac Fleetwood  10.4    8  472.0  205  2.93  5.250  17.98   0   0     3   \n",
       "Camaro Z28          13.3    8  350.0  245  3.73  3.840  15.41   0   0     3   \n",
       "Chrysler Imperial   14.7    8  440.0  230  3.23  5.345  17.42   0   0     3   \n",
       "Datsun 710          22.8    4  108.0   93  3.85  2.320  18.61   1   1     4   \n",
       "\n",
       "                    carb  \n",
       "model                     \n",
       "AMC Javelin            2  \n",
       "Cadillac Fleetwood     4  \n",
       "Camaro Z28             4  \n",
       "Chrysler Imperial      4  \n",
       "Datsun 710             1  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_index().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c93e2952",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['hp'].min() # it will return the minimum value in hp column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "125d3f76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "335"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['hp'].max() # it will return the maximum value in hp column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b2831bcc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "146.6875"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['hp'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3cbeb21c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mpg      15.00\n",
       "cyl       8.00\n",
       "disp    301.00\n",
       "hp      335.00\n",
       "drat      3.54\n",
       "wt        3.57\n",
       "qsec     14.60\n",
       "vs        0.00\n",
       "am        1.00\n",
       "gear      5.00\n",
       "carb      8.00\n",
       "Name: Maserati Bora, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['hp'].idxmax] # will return all the info of maximum horse power of car\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "af559688",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mpg     30.400\n",
       "cyl      4.000\n",
       "disp    75.700\n",
       "hp      52.000\n",
       "drat     4.930\n",
       "wt       1.615\n",
       "qsec    18.520\n",
       "vs       1.000\n",
       "am       1.000\n",
       "gear     4.000\n",
       "carb     2.000\n",
       "Name: Honda Civic, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['hp'].idxmin] # will return all the info of minimum horse power of car"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "664a2a26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cyl</th>\n",
       "      <th>disp</th>\n",
       "      <th>hp</th>\n",
       "      <th>drat</th>\n",
       "      <th>wt</th>\n",
       "      <th>qsec</th>\n",
       "      <th>vs</th>\n",
       "      <th>am</th>\n",
       "      <th>gear</th>\n",
       "      <th>carb</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mazda RX4</th>\n",
       "      <td>21.0</td>\n",
       "      <td>6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.9</td>\n",
       "      <td>2.620</td>\n",
       "      <td>16.46</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda RX4 Wag</th>\n",
       "      <td>21.0</td>\n",
       "      <td>6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.9</td>\n",
       "      <td>2.875</td>\n",
       "      <td>17.02</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb\n",
       "model                                                                       \n",
       "Mazda RX4      21.0    6  160.0  110   3.9  2.620  16.46   0   1     4     4\n",
       "Mazda RX4 Wag  21.0    6  160.0  110   3.9  2.875  17.02   0   1     4     4"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5cb0c0f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 4, 8], dtype=int64)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['cyl'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "14e9d0df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8    14\n",
       "4    11\n",
       "6     7\n",
       "Name: cyl, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['cyl'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1d5d4be6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">mpg</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cyl</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11.0</td>\n",
       "      <td>26.663636</td>\n",
       "      <td>4.509828</td>\n",
       "      <td>21.4</td>\n",
       "      <td>22.80</td>\n",
       "      <td>26.0</td>\n",
       "      <td>30.40</td>\n",
       "      <td>33.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.0</td>\n",
       "      <td>19.742857</td>\n",
       "      <td>1.453567</td>\n",
       "      <td>17.8</td>\n",
       "      <td>18.65</td>\n",
       "      <td>19.7</td>\n",
       "      <td>21.00</td>\n",
       "      <td>21.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>14.0</td>\n",
       "      <td>15.100000</td>\n",
       "      <td>2.560048</td>\n",
       "      <td>10.4</td>\n",
       "      <td>14.40</td>\n",
       "      <td>15.2</td>\n",
       "      <td>16.25</td>\n",
       "      <td>19.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      mpg                                                     \n",
       "    count       mean       std   min    25%   50%    75%   max\n",
       "cyl                                                           \n",
       "4    11.0  26.663636  4.509828  21.4  22.80  26.0  30.40  33.9\n",
       "6     7.0  19.742857  1.453567  17.8  18.65  19.7  21.00  21.4\n",
       "8    14.0  15.100000  2.560048  10.4  14.40  15.2  16.25  19.2"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['mpg','cyl']].groupby(['cyl']).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "359662d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cyl</th>\n",
       "      <th>disp</th>\n",
       "      <th>hp</th>\n",
       "      <th>drat</th>\n",
       "      <th>wt</th>\n",
       "      <th>qsec</th>\n",
       "      <th>vs</th>\n",
       "      <th>am</th>\n",
       "      <th>gear</th>\n",
       "      <th>carb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mpg</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.852162</td>\n",
       "      <td>-0.847551</td>\n",
       "      <td>-0.776168</td>\n",
       "      <td>0.681172</td>\n",
       "      <td>-0.867659</td>\n",
       "      <td>0.418684</td>\n",
       "      <td>0.664039</td>\n",
       "      <td>0.599832</td>\n",
       "      <td>0.480285</td>\n",
       "      <td>-0.550925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cyl</th>\n",
       "      <td>-0.852162</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.902033</td>\n",
       "      <td>0.832447</td>\n",
       "      <td>-0.699938</td>\n",
       "      <td>0.782496</td>\n",
       "      <td>-0.591242</td>\n",
       "      <td>-0.810812</td>\n",
       "      <td>-0.522607</td>\n",
       "      <td>-0.492687</td>\n",
       "      <td>0.526988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>disp</th>\n",
       "      <td>-0.847551</td>\n",
       "      <td>0.902033</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.790949</td>\n",
       "      <td>-0.710214</td>\n",
       "      <td>0.887980</td>\n",
       "      <td>-0.433698</td>\n",
       "      <td>-0.710416</td>\n",
       "      <td>-0.591227</td>\n",
       "      <td>-0.555569</td>\n",
       "      <td>0.394977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hp</th>\n",
       "      <td>-0.776168</td>\n",
       "      <td>0.832447</td>\n",
       "      <td>0.790949</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.448759</td>\n",
       "      <td>0.658748</td>\n",
       "      <td>-0.708223</td>\n",
       "      <td>-0.723097</td>\n",
       "      <td>-0.243204</td>\n",
       "      <td>-0.125704</td>\n",
       "      <td>0.749812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>drat</th>\n",
       "      <td>0.681172</td>\n",
       "      <td>-0.699938</td>\n",
       "      <td>-0.710214</td>\n",
       "      <td>-0.448759</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.712441</td>\n",
       "      <td>0.091205</td>\n",
       "      <td>0.440278</td>\n",
       "      <td>0.712711</td>\n",
       "      <td>0.699610</td>\n",
       "      <td>-0.090790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wt</th>\n",
       "      <td>-0.867659</td>\n",
       "      <td>0.782496</td>\n",
       "      <td>0.887980</td>\n",
       "      <td>0.658748</td>\n",
       "      <td>-0.712441</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.174716</td>\n",
       "      <td>-0.554916</td>\n",
       "      <td>-0.692495</td>\n",
       "      <td>-0.583287</td>\n",
       "      <td>0.427606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>qsec</th>\n",
       "      <td>0.418684</td>\n",
       "      <td>-0.591242</td>\n",
       "      <td>-0.433698</td>\n",
       "      <td>-0.708223</td>\n",
       "      <td>0.091205</td>\n",
       "      <td>-0.174716</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.744535</td>\n",
       "      <td>-0.229861</td>\n",
       "      <td>-0.212682</td>\n",
       "      <td>-0.656249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vs</th>\n",
       "      <td>0.664039</td>\n",
       "      <td>-0.810812</td>\n",
       "      <td>-0.710416</td>\n",
       "      <td>-0.723097</td>\n",
       "      <td>0.440278</td>\n",
       "      <td>-0.554916</td>\n",
       "      <td>0.744535</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.168345</td>\n",
       "      <td>0.206023</td>\n",
       "      <td>-0.569607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>am</th>\n",
       "      <td>0.599832</td>\n",
       "      <td>-0.522607</td>\n",
       "      <td>-0.591227</td>\n",
       "      <td>-0.243204</td>\n",
       "      <td>0.712711</td>\n",
       "      <td>-0.692495</td>\n",
       "      <td>-0.229861</td>\n",
       "      <td>0.168345</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.794059</td>\n",
       "      <td>0.057534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gear</th>\n",
       "      <td>0.480285</td>\n",
       "      <td>-0.492687</td>\n",
       "      <td>-0.555569</td>\n",
       "      <td>-0.125704</td>\n",
       "      <td>0.699610</td>\n",
       "      <td>-0.583287</td>\n",
       "      <td>-0.212682</td>\n",
       "      <td>0.206023</td>\n",
       "      <td>0.794059</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.274073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>carb</th>\n",
       "      <td>-0.550925</td>\n",
       "      <td>0.526988</td>\n",
       "      <td>0.394977</td>\n",
       "      <td>0.749812</td>\n",
       "      <td>-0.090790</td>\n",
       "      <td>0.427606</td>\n",
       "      <td>-0.656249</td>\n",
       "      <td>-0.569607</td>\n",
       "      <td>0.057534</td>\n",
       "      <td>0.274073</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           mpg       cyl      disp        hp      drat        wt      qsec  \\\n",
       "mpg   1.000000 -0.852162 -0.847551 -0.776168  0.681172 -0.867659  0.418684   \n",
       "cyl  -0.852162  1.000000  0.902033  0.832447 -0.699938  0.782496 -0.591242   \n",
       "disp -0.847551  0.902033  1.000000  0.790949 -0.710214  0.887980 -0.433698   \n",
       "hp   -0.776168  0.832447  0.790949  1.000000 -0.448759  0.658748 -0.708223   \n",
       "drat  0.681172 -0.699938 -0.710214 -0.448759  1.000000 -0.712441  0.091205   \n",
       "wt   -0.867659  0.782496  0.887980  0.658748 -0.712441  1.000000 -0.174716   \n",
       "qsec  0.418684 -0.591242 -0.433698 -0.708223  0.091205 -0.174716  1.000000   \n",
       "vs    0.664039 -0.810812 -0.710416 -0.723097  0.440278 -0.554916  0.744535   \n",
       "am    0.599832 -0.522607 -0.591227 -0.243204  0.712711 -0.692495 -0.229861   \n",
       "gear  0.480285 -0.492687 -0.555569 -0.125704  0.699610 -0.583287 -0.212682   \n",
       "carb -0.550925  0.526988  0.394977  0.749812 -0.090790  0.427606 -0.656249   \n",
       "\n",
       "            vs        am      gear      carb  \n",
       "mpg   0.664039  0.599832  0.480285 -0.550925  \n",
       "cyl  -0.810812 -0.522607 -0.492687  0.526988  \n",
       "disp -0.710416 -0.591227 -0.555569  0.394977  \n",
       "hp   -0.723097 -0.243204 -0.125704  0.749812  \n",
       "drat  0.440278  0.712711  0.699610 -0.090790  \n",
       "wt   -0.554916 -0.692495 -0.583287  0.427606  \n",
       "qsec  0.744535 -0.229861 -0.212682 -0.656249  \n",
       "vs    1.000000  0.168345  0.206023 -0.569607  \n",
       "am    0.168345  1.000000  0.794059  0.057534  \n",
       "gear  0.206023  0.794059  1.000000  0.274073  \n",
       "carb -0.569607  0.057534  0.274073  1.000000  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fa944a9",
   "metadata": {},
   "source": [
    "# Data Visualization \n",
    "\n",
    "\n",
    "### Line plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "39b9fcd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00c2e081",
   "metadata": {},
   "source": [
    "1.Point (1,3)\n",
    "\n",
    "2.Point (6,9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ee64fb70",
   "metadata": {},
   "outputs": [],
   "source": [
    "x= [1,6]\n",
    "y= [3,9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ea62bd45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1ba85fa5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y) # Assignment of 16th Oct ( How to plot graph from origin(0,0))\n",
    "plt.ylim(ymin=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3bbf0aa3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y, marker=\"*\", color='green')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4dd867b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "05883adb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pylab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8c52bbc1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y, marker= 'D', linestyle= \":\", markersize=\"5\", color= \"g\")\n",
    "plt.xlabel(\"x- Axis\")\n",
    "plt.ylabel(\"y- Axis\")\n",
    "plt.title(\"graph\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "28a8ecaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "46472b0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y, marker= \"*\", c=\"k\", s=40) # c= color,s=size\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f97db694",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pyplot import subplots, show\n",
    "a = [1, 2, 3, 4, 5]\n",
    "b = [2, 3, 2, 3, 2]\n",
    "fig, ax = subplots()\n",
    "ax.plot(a, b)\n",
    "ax.set_xlabel(\"Time\")\n",
    "ax.set_ylabel(\"Speed\")\n",
    "show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "24e416fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df[\"mpg\"],df[\"cyl\"], marker= \"*\", c=\"k\", s=20)\n",
    "plt.xlabel(\"mpg\")\n",
    "plt.ylabel(\"cyl\")\n",
    "plt.title(\"Mpg vs Cyl\")\n",
    "show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "1a543bd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "4b35b4d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "name=['A','B','C','D']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "1ad12d14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([30714, 26407, 33189, 33419])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "salary=np.random.randint(20000, 40000,4)\n",
    "salary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "d4af5cf4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(name, salary,color=['black','red','green','blue'])\n",
    "plt.xlabel(\"name\")\n",
    "plt.ylabel(\"Salary\")\n",
    "plt.title(\"Name & salary relationship\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f1223b5",
   "metadata": {},
   "source": [
    "## to draw horizontal bar graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "d02776d7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.barh(name,salary, color=['black','red','green','blue'])\n",
    "plt.xlabel(\"salary\")\n",
    "plt.ylabel(\"name\")\n",
    "plt.title(\"Name & salary relationship\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "a94fea89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOcAAADnCAYAAADl9EEgAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAXMklEQVR4nO3de5hcdX3H8fdvL8lubpMbuZHLIBAy4AByqbShQBQQWLVgEYpSR6XQinipWpzHS5m2oitKFfGGgrCUAhYUVEapQLUUKRRQ4BBmBCKLQEI2V5K9ze7M/PrHmcU8Mcnezpnv75z5vp5nHzc82fP7mrOfOZffzVhrUUq5p0m6AKXUnmk4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR2k4lXKUhlMpR7VIF6D2IZcwwHJgFbAUmFf7mrvL9/OAmYABTMm29hxS6poHlHb5ehV4GXhpl68XgZe6Ozs21/P/kho7oxsZOSKXOBg4Aj+Iqdr/HgJMH89hhm3z7w8u/dvycfzIIH5QHwf+r/b1WHdnR9942lXB03BK8K+IhwInAifUvhYHcegh29K9snRjcpKHqQBP4wf1EeBh4Mnuzo7qJI+rxkHDWS+5xELgHcDJ+GGcH0YzJdvyu0NKN74uhENvBH4C3AHc193ZUQqhDbULDWeYcokFwF8C5+AHMvQXcIO2dd2qUteBITezE7gbP6j57s6OHSG315A0nEHLJeYA78QP5ElAcz2bH7BTnk2Vbji4jk0OAb8AuoDbuzs7huvYdqxpOIOSS7we+DBwPtAuVUa/nfrbQ0vXHyLU/AbgO8A13Z0dG4RqiI1YhdMYUwE8/G6FCnCJtfbB0BrMJZqAt+GH8k2htTMOfbatcFjpeynhMoaBHwBXd3d2hPfvH3NxC2evtXZG7fu3AJ+y1p4YeEO5xHTgIuASIIyXLxO207avTZeuO0y6jl38GrgauKm7s6MsXUyUxHmE0CxgW6BHzCVaySUuBp4D/hXHgglgwbVP26OA64Gnktn8O6SLiZK4XTlHbmvb8PsN32StfWzSB/b7Jc8FPgeE/SZ0Ul610548onTt4dJ17MODwKXdnR2/ki7EdXG7cg5Ya4+01q4CTgNuNMaYSR0xlzgVeBS4BceDCVClyfVP2z8DHkhm83cms3npZ2Onxe3K+dozZ+3PG4G0tbZn3AfLJZYD3wLOCK7C8G2xM39zdOmaN0jXMUYV4HvAZ7o7O8Z/jmIublfO1xhjVuH3MW4Z1w/mEoZc4oPAU0QsmAAWE6VP22bgQmBtMpt/p3QxronbrJR2Y8zjte8NkLHWVsb807nEIcC1wPHBl1YfVZqiOP51PvAfyWz++8AHuzs7xveBGlOxuq2dsFyiBbgU+EdgqnA1k/KKnfPocaVvHCNdxyS8AlzU3dnxE+lCpMX2tnbMcokD8N8gXk7EgwlQxUTxyrmrRcCPk9n8DclsPhHUQY0xZxljbO1xJxIaO5y5xFn4neTHSpcSlAi8rR2rDH7f6J8HdLzzgAeAvwroeKFrzHDmEs3kElcCPwRmC1cTqKqNTTjBX/3hvmQ2f8FkDmKMmQGsBi5Aw+mwXGI/4B7gY9KlhKESrbe1Y9EKXJvM5r+SzOYnOsPnTOBua+0zwFZjzFGBVReixgpnLnEE/oCCNdKlhCVGt7W7+yhw1wSfQ88Dbq19f2vtz85rnHDmEicC9+MvmBVb1Xif0tOAh5LZ/EFj/QFjzDz8GUPXGmO6gX8Azp30yLE6iPWZfE0u8Xb8mfuzpEsJWzV+t7W7WwU8nMzmxzpF72zgRmvtCmtt0lq7DHieCPRlxz+cucR78V/8tAlXUheV+N7W7mou8LNkNn/mGP7uefjLqezqB8C7gi4qaPEOZy7xCfyxm3VdKkRSg4QTYAr+qKKz9/WXrLUnWWvv3u2/fc1a+4FQqwtAfMOZS1wOfAl/GF/DqDTO5xD4b3JvSWbzkekeGY94hjOX+CTwKekyJDTQlXNEC3DTaFfQKIpfOHOJC4BO6TKkxPxt7d40Azcns/kO6UKCFK8z6Q/Hu0a6DEkNeOUc0Qrcnszm3yxdSFDiE85cYg3+agUN9dC1u4qNzymdgDbgjmQ2f6h0IUGIx5nMJY4CfkQMZpVMViUmp3QSZgI/Smbzc6QLmazon0l/y4Mf45+UhlemuVFva3d1EHDrJMbiOiHa4cwlmvHHSu4vXYor9Mr5mlOBL0oXMRlRP5OXE+NB7BNRoamh+nVH8fFkNn++dBETFd1w5hJ/gb+0iNpFRW9rd/fdZDZ/tHQRExHNcOYSB+HvaqVXid3obe0faQPuTGbzoeyHGqbonclcog1/4HJg68vESbmxe5L2Zinwdekixit64YTLAJe3GxBVbux+zn05N2p7tUTrTPr9mZ+QLsNlFZr1Vn/vvpnM5udJFzFW0Qmnv7bsdcRvIexA6TPnPi0ErpIuYqyidCYvBY6ULsJ1DTZlbCLenczm3yZdxFhEI5y5xCr81djVKPSF0JhcE4Xhfe6H098b81p03OyYlHUQwlgsBq6ULmI07ofT37R2tXQRUVHWF0Jj9d5kNn+EdBH74nY4c4lW/N2k1Rjp8L0xM8DnpYvYF7fDCRcRgd2kXVKx+sw5DmcEuBdL4NwNZy4xA/isdBlRoy+Exu0L0gXsjbvh9PcyWShdRNToM+e4rU5m82+VLmJP3Aynv9mQjgSaAA3nhFyezOad+3dzM5z+VVNXNpgA7UqZkMNxcHMj98KZS0zDfxGkJqCqV86J+ox0AbtzL5xwPv5eGGoC9Mo5YalkNn+SdBG7cjGcH5YuIMr0mXNSLpYuYFduhTOXOBk4TLqMKCtbDecknJnM5hdJFzHCrXDCR6QLiDq9ck5KK/A30kWMcCecucSBwBnSZURdhWZ3zmk0XeTKercuncj34FY9kVShSf8NJ2cZ4MSGSC6dyHdKFxAHZadOaWQ58WLIjTOZS6SBlHQZcaC3tYE4xYWlNF05kedKFxAX+kIoEE04cGvrSjj1ljYgZX3mDIr4OkPyJzKXOBJYKV1GXFSs3tYG5NRkNj9FsgAXTuQ50gXEib6tDcxM4CTJAlw4kadLFxAnukxJoN4u2bhsOHOJeYDTiyxFTVnf1gZJ9LlT+kSuQXcKC5R2pQRqeTKbF9uXR/REvm/RgsOunDP7/qentK6zoPtKBkCfOQMntjmz6L4jj7a3nfloe9uRN8yehbF28/7lynMn9A+UOvr6FqVLQyuNXlXHTbtSAneUVMNi4Ux3pWcC6ZE/W2Pmv9TaMv/mxExuTszEWLt9UaXyzPH9AwMdvf0LjiyVVjajS8uNpkqT/hsFS2xXbGOtzN1kuit9MnDPmH/A2h37VSrPrB4Y7O3o7Zt/zGBpVYvuOPZHji9dtf4lu98S6TpipALM6u7s6K93w5K/3H86rr9tzKxNLS3H3DlzBnfOnAHW9s2rVJ84bnBwZ0dv39w3DgyumgKincYuqFi9rQ1YM/7udg/Wu2HJcE5uxQNjpm9paT46P2M6+RnTwdrB2dXq48cOlrZ39PYlVg8Mrmqztj2gWiOjore1YTiaBgtnsNssGNO2vbn5yHumT+Oe6dPA2qFZ1eqTRw+Wtp7R1z/zhP6BVdOsnR5omw7SF0KhEHkpFJ9w7s6YKTuamw//xfRp/MIPa3mGtWuPHCxtOr2vb/qavoFDZlo7K9QaBFRo1itn8EReCom8EEp3pecAW+ve8K6srUyz9pnDS0M9p/f2tb+5f2BlolqdLVpTANKD392xk+mx+9ARVgGmdnd2VOrZqNSV83VC7f6BMc39xqQeam9LPdTexmXW2jZrnzmsNLThtL7+qaf09R80r1oVn3A7XlW9rQ1DM/6+Pevr2ahUON3b1s8YM2jMysfa21Y+1t7G5fPm2CmWdamhoZff0tff8pa+/oMWVCoLpMscjb4QCs1iNJyOMMYMGQ58om3qgU+0TeWKeXNotbb74KGhF0/tG2g6ra/vgP3LFef6E/WZMzSL692ghnMcho1JPj11avLpqVP56tzZtFj74oFDwy+c3N/P6b39K1aUy8uka9QrZ2jq/kHcuM+cASgbs+y3U6cs++3UKXxjzmyarV2fHC4//6b+/uoZvf1LDxoePqDeNVUxGs5wNMyVc55Qu6GqGLNk3ZTWJeumJPju7ARN1m5cVi6vW9M3UD6jr2//1NBwqHcM1mLB6GSBcDRMONuE2q2rqjELX2htXXjD7Fb+MPOm/NwJ/YNhzbypoOONw6LhjDN/5k3r/JsTrWHNvNFwhqdhwjlVqF2nWGNmb2hp+ZPbZs3ktlkzg5h5U9dO8gZT96GfeuV0yeRn3mg4w9Na7wY1nC4b/8wbXeolPHXPSt0bTHelDXpbOzGjzLxZ3Te4GNBxteGoe1bqPvA93ZVuAwbq2miDWLTFPv/V71QS0nXEkTVN619fWJse/W8GR+K2Vq+aIVm+2W5vgroPfGgItvpqvZuUmMEwLNBmQ0hutH3SNcRY3X9v6x5OL+P1o7e1oVi+ibJ0DTFW939bqbl/W4TajbXFW23dX/c3kKF6N6jhjJG5O/VNbYg21btBDWeMtA2xn3QNMfZSvRvUcMZES9mWmiwLpeuIsZfr3aBUODcLtRtbi7axXveWCVXDhFOvnAFbvsnKrmYYf3pbqyZG+zhD1zBXzrp/CsXd8k066D1kDRPOglC7sbVom/ZxhmiIBupKeQaBERdxNrsXHfAenvWpYqHudyYi4fQy3jDwnETbcdU2jPMLXkfYUxKNSi7dv1aw7ViZMmz7m6wOQAjRwxKNSobzccG2Y2XJFjZI1xBzD0k0KhnORwXbjhXt4wyVBR6RaFgynI8Jth0ryY1Wp+CFp5gqFuo+0RoEw+llvE3A76Xaj5Nlm7WPM0Qiz5sge+UEeEC4/VhYuM3q0i/hadhw/lS4/VhI9DFbuoYYa9hw3o0uhDxpbcM6VSwk/YAn1bhoOL2MtwWh19Rx0T5odxiYI11HTN2bKhbERrJJXzkB8tIFRNmSrbwiXUOM3S7ZuIYz4lb02O3SNcTUEPBjyQLEw+llvCeBF6XriKoVPdrHGZJ7pPo3R4iHs0bf2k7Qsk26NElIRG9pwZ1w3iVdQFQt3K59nCEYBn4kXYQr4fw5ApNZ42BWv76pDcF9qWJhm3QRToTTy3hDwPek64iiKWUWSdcQQ+K3tOBIOGu+DVSli4iSGf12u9H9OIM2BNwpXQQ4FE4v43XjjxhSY7S/zuMMw22pYsGJ1SGdCWfNN6ULiJIVPVb0VX9MXSVdwAjXwvkzoFu6iKhY0WNL0jXEzEOpYkFkYvWeOBVOL+NVgWuk64iKpZut9nEGy5mrJjgWzprrENgLMYoWvEq7dA0x0o0jb2lHOBfO2goJN0vXEQUz+5krXUOMfElyBsqeOBfOmhygz1OjaK1oH2dANuJgP7uT4fQy3gvAN6TrcFmi1242MF26jpi4KlUsDEoXsTsnw1lzOaBdBXuxdIvdKF1DTGwArpYuYk+cDaeX8bYCndJ1uGrFRnZI1xATn0wVC73SReyJs+GsuQrdLnCPtI8zEA8CN0kXsTdOh9PLeAP4L4fUbpZusc3SNURcFfiQxO5hY+V0OGtuAJ6WLsI187WPc7KuSxULv5YuYl+cD6eX8SrAJ6TrcM2MQeZJ1xBh24FPSRcxGufDCeBlvJ8B/y5dhzOstS0VlkiXEWGXpYqFzdJFjCYS4az5MOgykABzd9JjQJcnmZiniMjsp8iEs9a1crF0HS5Yutn2SNcQUUPA+1wbprc3kQkngJfx7kDH3ZLsYad0DRGVTRULkdkXVjycxphFxphbjTHrjDFPG2N+aoxZuY8fuZgGn/O5osfqrJ3xuytVLHxFuojxEA2nMcYAdwC/tNYeaK09FP8t2l435vEy3qvAX9PAGyAt2WJbpGuImJeA90oXMV7SV841wLC19tsj/8Fa+7i19n/29UNexnsA+ELYxblq/g6mSdcQIRXgXa6sCzQe0uF8PRPffj4H/GdwpUTH9EHmS9cQIblUsbDPD3tXSYdzwmqDE87BfzXeMIy11eYqi6XriIj7gM9LFzFR0uFcCxw90R/2Mt4OoIMG6v/c71VeMdAqXUcEvAicnyoWIrsWsnQ4/wuYaoy5cOQ/GGOONcacONYDeBnv98Db8Xchjr2lm6xuWzG6zcCpqWIh0h/aouG01lrgLOCUWlfKWvxnyfXjOY6X8R7Bf4Pr7AyDoCR7cHLuoUN6gTNSxUJRupDJkr5yYq1db609p9aVcpi1tsNa++x4j+NlvB8C2RBKdMryHjssXYPDhoCzXFp7djLEwxkkL+NdAVwrXUeYlmy1+ry5Z1X8Z8x7pQsJSqzCWfN3ODy7fbLm7dRFvfbig6li4TbpIoIUu3DWuljeg79rWexMG2Q/6RocdFmqWIjd+Y5dOAG8jGe9jPcB4EvStQSpqWrLTVbXqt3N51PFwj9LFxGGWIZzhJfxLgU+K11HUBZuY70BXTvIZ4GPpoqFT0sXEpZYhxPAy3ifAz5KDLpZlm+ykRsfGpJh/Jc/Tm08FLTYhxPAy3hXARcS8Z2zV/RY7eOEHcDbUsVC7Of1NkQ4AbyMdx1wNkR3MeblPdH+cAnAC8DqVLHQEBMeGiac8NpKCscAT0rXMhGLtzX0PM6HgTemioWGmejQUOEE8DLes8Bx+OvhRsrcncySrkHIdcCaVLEw6v4wxpiKMeZxY8xaY8wTxpiPGWMi+Xtu/OGtjSndlb4A+DrQJl3LWNzSWX6lubG6UrYCF6aKhR+O9QeMMb3W2hm17xfgrzn1K2vtZSHVGJpIfqIEpfYcehzwnHQto2kp21KT3fvyLTF0L5AeTzB3Z63tAS4CLqktiRMpDR1OAC/jPYE/p/QH0rXsyyK/jzNyv2ATUAI+hj/la1yzk/bEWvs7/N/zBZM9Vr018guG19QmbZ+d7kqfB3wVB0/k8k12K3CAdB0hewp4d6pYCPqFXSQ/1Br+yrkrL+PdAqSA66Vr2V1yo+2TriFEFfwPxWODDqYx5nW140duIW4N5268jLfVy3jvx18Z0JnX9ss3RX+E017k8Z8t/z7ord+NMfvhT4D4uo3gm08N5154Ge+XwBuAj+DvSiVq0bbYzeN8EjglVSy8NVUsFAI8bvtIVwr+S6WfA/8U4PHrpqG7UsYq3ZWeD/wL8H5gikQNN1xZXjttiMMk2g7YBuAzwA1RXnyrHjSc45DuSi8FPo4/Treuk55v7SxvarKRnsvZD3wZuCJVLMT5+TkwGs4JSHel5+FvSfghYE7Y7U0Ztv03fbkS1VXee4DvAN9MFQsbpIuJEg3nJKS70jOAv8XvlwttM9vkK3bdFddXDgzr+CF5FLga+H6qWChJFxNFGs4ApLvSU4EM/u3uMUEf/wSv+sgld1WPDfq4IRgGbgeuThUL/ytdTNRpOAOW7kofDLwLOA84JIhjvufeyv1vfcSeEMSxQvIy/uD0b+uta3A0nCFKd6WPwg/qucDSiR7n07dW/vuI5+2YV8GvkxfwhzzeDjyUKhb0FylgGs46SHelDXAC/sZLJ+GPQhrzkLKvfav80KLtHBdOdWNWxX+O/CmQj9IO0VGl4RRQe9u7Gvhz4Hj8gfd7HWTQ9eVysX2YVXUqb0QJ8IDfAPcDd6eKhc11rqGhaTgdkO5KtwNvxA/qcfjPqklqExO+/4XyNhNul00v8ATw69rXb4C1qWKhHGKbahQaTkelu9KtwAFNVXvQrV+sJIFl+M+tS4HFQDv+1bYVf9TSyPe7zjQq4++41bOXr43As8CzOlrHPRrOmCmsShn8gLYCA/qiJro0nEo5SmelKOUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuUoDadSjtJwKuWo/wdjWs+0HhwZnQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(salary,labels=name)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "030ef2a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(salary,labels=name, startangle=90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2557942e",
   "metadata": {},
   "source": [
    "## Explode\n",
    "### explode represents how faar from the center each wedge is displayed "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "dfe6f24f",
   "metadata": {},
   "outputs": [],
   "source": [
    "myexplode= [0.2,0.3,0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "2e311377",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(salary,labels=name, startangle=90,explode= myexplode)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "61082c5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "36a03cf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='cyl',data=df)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "9fccf61d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 402.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x=\"cyl\",hue=\"gear\",kind=\"count\", data=df)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "207981e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "corr= df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "a097ae87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data=corr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "a548107e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data=corr, cmap=\"inferno\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "28d4fae6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data=corr,square= True,cmap=\"inferno\") # details on x-axis returned vertically\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5117b20",
   "metadata": {},
   "source": [
    "# DEALING WITH MISSING VALUES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "8d67cb83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 32 entries, Mazda RX4 to Volvo 142E\n",
      "Data columns (total 11 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   mpg     32 non-null     float64\n",
      " 1   cyl     32 non-null     int64  \n",
      " 2   disp    32 non-null     float64\n",
      " 3   hp      32 non-null     int64  \n",
      " 4   drat    32 non-null     float64\n",
      " 5   wt      32 non-null     float64\n",
      " 6   qsec    32 non-null     float64\n",
      " 7   vs      32 non-null     int64  \n",
      " 8   am      32 non-null     int64  \n",
      " 9   gear    32 non-null     int64  \n",
      " 10  carb    32 non-null     int64  \n",
      "dtypes: float64(5), int64(6)\n",
      "memory usage: 4.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "abe07a5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mpg     0\n",
       "cyl     0\n",
       "disp    0\n",
       "hp      0\n",
       "drat    0\n",
       "wt      0\n",
       "qsec    0\n",
       "vs      0\n",
       "am      0\n",
       "gear    0\n",
       "carb    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "2b7a6e7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mpg     False\n",
       "cyl     False\n",
       "disp    False\n",
       "hp      False\n",
       "drat    False\n",
       "wt      False\n",
       "qsec    False\n",
       "vs      False\n",
       "am      False\n",
       "gear    False\n",
       "carb    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "1b4fb4e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "z1 = [1,np.nan,np.nan, 4, 5, np.nan, 7, np.nan]\n",
    "z2 = [1,1,1,1,2,2,2,2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "9bd8d58d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, nan, nan, 4, 5, nan, 7, nan]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "627ae546",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 1, 1, 1, 2, 2, 2, 2]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "43717b9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=pd.DataFrame({'Cricket':z1,\n",
    "                 'Tennis':z2})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e7c56f1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cricket</th>\n",
       "      <th>Tennis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cricket  Tennis\n",
       "0      1.0       1\n",
       "1      NaN       1\n",
       "2      NaN       1\n",
       "3      4.0       1\n",
       "4      5.0       2\n",
       "5      NaN       2\n",
       "6      7.0       2\n",
       "7      NaN       2"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "3516f7db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8 entries, 0 to 7\n",
      "Data columns (total 2 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   Cricket  4 non-null      float64\n",
      " 1   Tennis   8 non-null      int64  \n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 256.0 bytes\n"
     ]
    }
   ],
   "source": [
    "df1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "c9cba96c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cricket</th>\n",
       "      <th>Tennis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cricket  Tennis\n",
       "0    False   False\n",
       "1     True   False\n",
       "2     True   False\n",
       "3    False   False\n",
       "4    False   False\n",
       "5     True   False\n",
       "6    False   False\n",
       "7     True   False"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "81b82986",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cricket    4\n",
       "Tennis     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "c1843064",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.to_csv(\"missing eg.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "184a3164",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cricket</th>\n",
       "      <th>Tennis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cricket  Tennis\n",
       "0      1.0       1\n",
       "3      4.0       1\n",
       "4      5.0       2\n",
       "6      7.0       2"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "2bd2f754",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cricket</th>\n",
       "      <th>Tennis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cricket  Tennis\n",
       "0      1.0       1\n",
       "1      3.0       1\n",
       "2      3.0       1\n",
       "3      4.0       1\n",
       "4      5.0       2\n",
       "5      3.0       2\n",
       "6      7.0       2\n",
       "7      3.0       2"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.fillna(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "e122350c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.25"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1[\"Cricket\"].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "51f4869d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cricket</th>\n",
       "      <th>Tennis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.25</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.25</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4.25</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4.25</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cricket  Tennis\n",
       "0     1.00       1\n",
       "1     4.25       1\n",
       "2     4.25       1\n",
       "3     4.00       1\n",
       "4     5.00       2\n",
       "5     4.25       2\n",
       "6     7.00       2\n",
       "7     4.25       2"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.fillna(4.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "3b25ebe3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cricket</th>\n",
       "      <th>Tennis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.25</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.25</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4.25</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4.25</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cricket  Tennis\n",
       "0     1.00       1\n",
       "1     4.25       1\n",
       "2     4.25       1\n",
       "3     4.00       1\n",
       "4     5.00       2\n",
       "5     4.25       2\n",
       "6     7.00       2\n",
       "7     4.25       2"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.fillna(df1[\"Cricket\"].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3632846",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a1cc5a9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "823dcadc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cyl</th>\n",
       "      <th>disp</th>\n",
       "      <th>hp</th>\n",
       "      <th>drat</th>\n",
       "      <th>wt</th>\n",
       "      <th>qsec</th>\n",
       "      <th>vs</th>\n",
       "      <th>am</th>\n",
       "      <th>gear</th>\n",
       "      <th>carb</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mazda RX4</th>\n",
       "      <td>21.0</td>\n",
       "      <td>6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.9</td>\n",
       "      <td>2.62</td>\n",
       "      <td>16.46</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            mpg  cyl   disp   hp  drat    wt   qsec  vs  am  gear  carb\n",
       "model                                                                  \n",
       "Mazda RX4  21.0    6  160.0  110   3.9  2.62  16.46   0   1     4     4"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c25d9d18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     32.000000\n",
       "mean     146.687500\n",
       "std       68.562868\n",
       "min       52.000000\n",
       "25%       96.500000\n",
       "50%      123.000000\n",
       "75%      180.000000\n",
       "max      335.000000\n",
       "Name: hp, dtype: float64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['hp'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "55138a6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "67c0662b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='hp'>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['hp'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "475717e0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "009795dc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
